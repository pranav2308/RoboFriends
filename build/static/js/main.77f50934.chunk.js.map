{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","returnCardElement","user","components_Card","key","CardList","produceCardList","robots","map","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchString","target","value","state","bind","assertThisInitialized","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAgBeA,EAbF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,GAAIC,EAAiBF,EAAjBE,KAAMC,EAAWH,EAAXG,MACxB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oDAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAON,EAAMO,IAAG,wBAAAC,OAA4BT,EAA5B,cACrBG,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCNFQ,EAAoB,SAACC,GAE1B,OADcR,EAAAC,EAAAC,cAACO,EAAD,CAAMC,IAAOF,EAAKX,GAAIA,GAAMW,EAAKX,GAAIC,KAAQU,EAAKV,KAAMC,MAASS,EAAKT,SAgBtEY,EAXE,SAAAf,GAAgB,IAC1BgB,EAD0BhB,EAAbiB,OACYC,IAAIP,GACnC,OACCP,EAAAC,EAAAC,cAAA,WACEU,ICGWG,EAbG,SAAAnB,GAAsB,IAApBoB,EAAoBpB,EAApBoB,eACnB,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAChBH,EAAAC,EAAAC,cAAA,SACAC,UAAY,mCACZc,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCGAI,EATA,SAACC,GACf,OACCrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAS,CAACC,UAAY,SAAUC,OAAQ,iBAAkBC,OAAS,WACtEJ,EAAMK,WCoDKC,qBApDd,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAiBPL,eAAiB,SAACmB,GAKjBP,EAAKQ,SAAS,CACbC,aAAeF,EAAEG,OAAOC,SApBzBX,EAAKY,MAAQ,CACZ3B,OAAS,GACTwB,aAAe,IAEhBT,EAAKZ,eAAiBY,EAAKZ,eAAeyB,KAApBZ,OAAAa,EAAA,EAAAb,CAAAD,IARLA,mFAYC,IAAAe,EAAAZ,KAClBa,MAAM,8CACLC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAK,OAAIL,EAAKP,SAAS,CAAEvB,OAASmC,uCAajC,IAAAC,EAC0BlB,KAAKS,MAA9B3B,EADDoC,EACCpC,OAAQwB,EADTY,EACSZ,aAGVa,EAAiBrC,EAAOsC,OAAO,SAACC,GAAW,OAAQA,EAAMtD,KAAKuD,cAAcC,SAASjB,EAAagB,iBAExG,OAAIxC,EAAO0C,OAKTvD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,MAAhB,iBACAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWxC,eAAkBe,KAAKf,iBAClChB,EAAAC,EAAAC,cAACuD,EAAD,KACCzD,EAAAC,EAAAC,cAACwD,EAAD,CAAU7C,OAAUqC,MARhBlD,EAAAC,EAAAC,cAAA,MAAIC,UAAY,SAAhB,0BApCQwD,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACRnE,EAAAC,EAAAC,cAACkE,EAAD,MACEC,SAASC,eAAe,SDuHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.77f50934.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Describes each card component.\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt = {name} src = {`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst returnCardElement = (user) => {\r\n\tlet element = <Card key = {user.id} id = {user.id} name = {user.name} email = {user.email}/>\r\n\treturn element;\r\n}\r\n\r\n//Returns the list of cards.\r\nconst CardList = ({ robots }) => {\r\n\tconst produceCardList = robots.map(returnCardElement);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{produceCardList}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default CardList;\r\n\r\n","import React from 'react';\r\n\r\n//Renders the searcbox for searching robots.\r\nconst SearchBox = ({onSearchChange}) => {\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype = 'search' \r\n\t\t\tplaceholder = 'Search robots' \r\n\t\t\tonChange = {onSearchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n//Adds scrolling capability for wrapped components.\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style = {{overflowY : 'scroll', border: '1px solid blue', height : '1000px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\t//initializing the state.\r\n\t\tthis.state = {\r\n\t\t\trobots : [],\r\n\t\t\tsearchString : \"\",\t\r\n\t\t};\r\n\t\tthis.onSearchChange = this.onSearchChange.bind(this);\r\n\t}\r\n\r\n\t//Fetching the user data from API.\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then((response) => response.json())\r\n\t\t.then(users => this.setState({ robots : users}));\t\r\n\t}\r\n\r\n\tonSearchChange = (e) => {\r\n\t\t/*\r\n\t\t\tCalled by searchbox component when user edits the input.\r\n\t\t\tUpdates the state with serach-string typed. \r\n\t\t*/\r\n\t\tthis.setState({\r\n\t\t\tsearchString : e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst { robots, searchString } = this.state;\r\n\r\n\t\t//Filter the robots as per the search-string typed.\r\n\t\tconst filteredRobots = robots.filter((robot) => {return (robot.name.toLowerCase().includes(searchString.toLowerCase()))});\r\n\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1 className = 'tc f1'>Loading  robots</h1>;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className = 'f1'> RoboFriends </h1>\r\n\t\t\t\t\t<SearchBox onSearchChange = {this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots = {filteredRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}